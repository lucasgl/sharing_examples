<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WideBoxInterface</name>
    </assembly>
    <members>
        <member name="F:WideBoxInterface.APIChooser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WideBoxInterface.APIChooser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WideBoxInterface.APIChooser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WideBoxInterface.WBIChatService">
            <summary>
            Whirlpool box services
            </summary>
        </member>
        <member name="M:WideBoxInterface.WBIChatService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WideBoxInterface.WBIChatService"/> class.
            </summary>
        </member>
        <member name="T:Dolinay.DetectorForm">
            <summary>
            Hidden Form which we use to receive Windows messages about flash drives
            </summary>
        </member>
        <member name="M:Dolinay.DetectorForm.#ctor(Dolinay.DriveDetector)">
            <summary>
            Set up the hidden form. 
            </summary>
            <param name="detector">DriveDetector object which will receive notification about USB drives, see WndProc</param>
        </member>
        <member name="M:Dolinay.DetectorForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This function receives all the windows messages for this window (form).
            We call the DriveDetector from here so that is can pick up the messages about
            drives arrived and removed.
            </summary>
        </member>
        <member name="T:Dolinay.DriveDetectorEventArgs">
            <summary>
            Our class for passing in custom arguments to our event handlers 
            
            </summary>
        </member>
        <member name="F:Dolinay.DriveDetectorEventArgs.Cancel">
            <summary>
            Get/Set the value indicating that the event should be cancelled 
            Only in QueryRemove handler.
            </summary>
        </member>
        <member name="F:Dolinay.DriveDetectorEventArgs.Drive">
            <summary>
            Drive letter for the device which caused this event 
            </summary>
        </member>
        <member name="F:Dolinay.DriveDetectorEventArgs.HookQueryRemove">
            <summary>
            Set to true in your DeviceArrived event handler if you wish to receive the 
            QueryRemove event for this drive. 
            </summary>
        </member>
        <member name="T:Dolinay.DriveDetector">
            <summary>
            Detects insertion or removal of removable drives.
            Use it in 1 or 2 steps:
            1) Create instance of this class in your project and add handlers for the
            DeviceArrived, DeviceRemoved and QueryRemove events.
            AND (if you do not want drive detector to creaate a hidden form))
            2) Override WndProc in your form and call DriveDetector's WndProc from there. 
            If you do not want to do step 2, just use the DriveDetector constructor without arguments and
            it will create its own invisible form to receive messages from Windows.
            </summary>
        </member>
        <member name="M:Dolinay.DriveDetector.#ctor">
            <summary>
            The easiest way to use DriveDetector. 
            It will create hidden form for processing Windows messages about USB drives
            You do not need to override WndProc in your form.
            </summary>
        </member>
        <member name="M:Dolinay.DriveDetector.#ctor(System.Windows.Forms.Control)">
            <summary>
            Alternate constructor.
            Pass in your Form and DriveDetector will not create hidden form.
            </summary>
            <param name="control">object which will receive Windows messages. 
            Pass "this" as this argument from your form class.</param>
        </member>
        <member name="M:Dolinay.DriveDetector.#ctor(System.Windows.Forms.Control,System.String)">
             <summary>
             Consructs DriveDetector object setting also path to file which should be opened
             when registering for query remove.  
             </summary>
            <param name="control">object which will receive Windows messages. 
             Pass "this" as this argument from your form class.</param>
             <param name="FileToOpen">Optional. Name of a file on the removable drive which should be opened. 
             If null, root directory of the drive will be opened. Opening a file is needed for us 
             to be able to register for the query remove message. TIP: For files use relative path without drive letter.
             e.g. "SomeFolder\file_on_flash.txt"</param>
        </member>
        <member name="M:Dolinay.DriveDetector.Init(System.Windows.Forms.Control,System.String)">
            <summary>
            init the DriveDetector object
            </summary>
            <param name="intPtr"></param>
        </member>
        <member name="M:Dolinay.DriveDetector.EnableQueryRemove(System.String)">
            <summary>
            Hooks specified drive to receive a message when it is being removed.  
            This can be achieved also by setting e.HookQueryRemove to true in your 
            DeviceArrived event handler. 
            By default DriveDetector will open the root directory of the flash drive to obtain notification handle
            from Windows (to learn when the drive is about to be removed). 
            </summary>
            <param name="fileOnDrive">Drive letter or relative path to a file on the drive which should be 
            used to get a handle - required for registering to receive query remove messages.
            If only drive letter is specified (e.g. "D:\\", root directory of the drive will be opened.</param>
            <returns>true if hooked ok, false otherwise</returns>
        </member>
        <member name="M:Dolinay.DriveDetector.DisableQueryRemove">
            <summary>
            Unhooks any currently hooked drive so that the query remove 
            message is not generated for it.
            </summary>
        </member>
        <member name="M:Dolinay.DriveDetector.Dispose">
            <summary>
            Unregister and close the file we may have opened on the removable drive. 
            Garbage collector will call this method.
            </summary>
        </member>
        <member name="M:Dolinay.DriveDetector.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Message handler which must be called from client form.
            Processes Windows messages and calls event handlers. 
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:Dolinay.DriveDetector.mDirHandle">
            <summary>
            New: 28.10.2007 - handle to root directory of flash drive which is opened
            for device notification
            </summary>
        </member>
        <member name="F:Dolinay.DriveDetector.mFileOnFlash">
            <summary>
            Class which contains also handle to the file opened on the flash drive
            </summary>
        </member>
        <member name="F:Dolinay.DriveDetector.mFileToOpen">
            <summary>
            Name of the file to try to open on the removable drive for query remove registration
            </summary>
        </member>
        <member name="F:Dolinay.DriveDetector.mDeviceNotifyHandle">
            <summary>
            Handle to file which we keep opened on the drive if query remove message is required by the client
            </summary>       
        </member>
        <member name="F:Dolinay.DriveDetector.mRecipientHandle">
            <summary>
            Handle of the window which receives messages from Windows. This will be a form.
            </summary>
        </member>
        <member name="F:Dolinay.DriveDetector.mCurrentDrive">
            <summary>
            Drive which is currently hooked for query remove
            </summary>
        </member>
        <member name="M:Dolinay.DriveDetector.RegisterQuery(System.String)">
            <summary>
            Registers for receiving the query remove message for a given drive.
            We need to open a handle on that drive and register with this handle. 
            Client can specify this file in mFileToOpen or we will open root directory of the drive
            </summary>
            <param name="drive">drive for which to register. </param>
        </member>
        <member name="M:Dolinay.DriveDetector.RegisterForDeviceChange(System.String)">
            <summary>
            New version which gets the handle automatically for specified directory
            Only for registering! Unregister with the old version of this function...
            </summary>
            <param name="register"></param>
            <param name="dirPath">e.g. C:\\dir</param>
        </member>
        <member name="M:Dolinay.DriveDetector.RegisterForDeviceChange(System.Boolean,Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Registers to be notified when the volume is about to be removed
            This is requierd if you want to get the QUERY REMOVE messages
            </summary>
            <param name="register">true to register, false to unregister</param>
            <param name="fileHandle">handle of a file opened on the removable drive</param>
        </member>
        <member name="M:Dolinay.DriveDetector.DriveMaskToLetter(System.Int32)">
            <summary>
            Gets drive letter from a bit mask where bit 0 = A, bit 1 = B etc.
            There can actually be more than one drive in the mask but we 
            just use the last one in this case.
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="E:Dolinay.DriveDetector.DeviceArrived">
            <summary>
            Events signalized to the client app.
            Add handlers for these events in your form to be notified of removable device events 
            </summary>
        </member>
        <member name="P:Dolinay.DriveDetector.IsQueryHooked">
            <summary>
            Gets the value indicating whether the query remove event will be fired.
            </summary>
        </member>
        <member name="P:Dolinay.DriveDetector.HookedDrive">
            <summary>
            Gets letter of drive which is currently hooked. Empty string if none.
            See also IsQueryHooked.
            </summary>
        </member>
        <member name="P:Dolinay.DriveDetector.OpenedFile">
            <summary>
            Gets the file stream for file which this class opened on a drive to be notified
            about it's removal. 
            This will be null unless you specified a file to open (DriveDetector opens root directory of the flash drive) 
            </summary>
        </member>
        <member name="T:Dolinay.DriveDetector.Native">
            <summary>
            WinAPI functions
            </summary>        
        </member>
        <member name="M:Dolinay.DriveDetector.Native.OpenDirectory(System.String)">
            <summary>
            Opens a directory, returns it's handle or zero.
            </summary>
            <param name="dirPath">path to the directory, e.g. "C:\\dir"</param>
            <returns>handle to the directory. Close it with CloseHandle().</returns>
        </member>
        <member name="F:WideBoxInterface.InstallCustomInterface.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WideBoxInterface.InstallCustomInterface.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WideBoxInterface.InstallCustomInterface.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:WideBoxInterface.InternalMessage.SimpleWhirlpoolPacket">
            <summary>
            Contain a SWM
            </summary>
        </member>
        <member name="P:WideBoxInterface.InternalMessage.DeviceMessage">
            <summary>
            Contain a Device Message
            </summary>
        </member>
        <member name="F:WideBoxInterface.InternalMessage.MESSAGE_TYPE.SWM">
            <summary>
            SimpleWhirlpoolPacket
            </summary>
        </member>
        <member name="F:WideBoxInterface.InternalMessage.MESSAGE_TYPE.DM">
            <summary>
            DeviceMessage
            </summary>
        </member>
        <member name="T:WideBoxInterface.IWBoxService">
            <summary>
            Whirlpool Box Service Interface
            </summary>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.#ctor(System.Boolean)">
            <summary>
            Create a new merge tool with drag and drop effects enabled or disabled
            </summary>
            <param name="dragdropEnable">Enable the Drag and Drop Effects</param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.#ctor">
            <summary>
            Create a new merge tool
            </summary>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.buttonAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Add files to merge list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.buttonSave_Click(System.Object,System.EventArgs)">
            <summary>
            Create a new record file based on Filter Selection
            Start the background process to merge the files
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.removeToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Remove Files from the list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.listBoxFileRecords_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Select and Show context Menu if a item is right-cliked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.exploreToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Explore the file directory
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.listBoxFileRecords_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the Drops in the list box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.listBoxFileRecords_DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Create the effect for the right data on draging
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.backgroundWorkerMerge_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Merge and create the file with the file list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.backgroundWorkerMerge_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Work done callback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.backgroundWorkerMerge_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Reports the progress to the user interface
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:WideBoxInterface.MergeLogFiles.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WideBoxInterface.MergeLogFiles.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WideBoxInterface.Message.ParseLogMessage(System.String)">
            <summary>
            Parse a log line into a Message type.
            Returns false if not a valid log message type.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:WideBoxInterface.Message.MessageTime">
            <summary>
            Get or Set the Time of current arrived message
            </summary>
        </member>
        <member name="P:WideBoxInterface.Message.Valid">
            <summary>
            Get or Set if the current message is invalid
            </summary>
        </member>
        <member name="P:WideBoxInterface.Message.Data">
            <summary>
            Get or Set the raw Data of the current message
            </summary>
        </member>
        <member name="T:WideBoxInterface.NumericTextBox">
            <summary>
            Numeric text box
            </summary>
        </member>
        <member name="M:WideBoxInterface.NumericTextBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WideBoxInterface.NumericTextBox.OnValueChanged(System.EventArgs)">
            <summary>
            Raise the value changed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:WideBoxInterface.NumericTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:WideBoxInterface.NumericTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WideBoxInterface.NumericTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:WideBoxInterface.NumericTextBox.Type">
            <summary>
            Base type
            </summary>
        </member>
        <member name="P:WideBoxInterface.NumericTextBox.Value">
            <summary>
            Set or Get the Decimal value
            </summary>
        </member>
        <member name="E:WideBoxInterface.NumericTextBox.ValueChanged">
            <summary>
            Raised when the value changed
            </summary>
        </member>
        <member name="M:WideBoxInterface.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:WhirlpoolUtils.RelayCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new Command based on a action to execute and a test to check if can be executed
            Call OnCanExecuteChanged() to re-evaluate the command
            </summary>
            <param name="action"></param>
            <param name="test"></param>
        </member>
        <member name="M:WhirlpoolUtils.RelayCommand.CanExecute(System.Object)">
            <summary>
            Returns if this command can be executed based on the test method passed on the contructor
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:WhirlpoolUtils.RelayCommand.OnCanExecuteChanged">
            <summary>
            Invoke when need to re-evaluate if CanExecute
            </summary>
        </member>
        <member name="M:WhirlpoolUtils.RelayCommand.Execute(System.Object)">
            <summary>
            Execute the action method given in the constructor
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:WideBoxInterface.ReplayOptions.ExecuteLoadLog(System.Object)">
            <summary>
            Load A log file
            </summary>
            <param name="parameter">none</param>
        </member>
        <member name="M:WideBoxInterface.ReplayOptions.CanExecuteLoadLog(System.Object)">
            <summary>
            Call when need to know if the load log can be executed
            </summary>
            <param name="parameter">none</param>
            <returns>True if Load Log can be executed</returns>
        </member>
        <member name="M:WideBoxInterface.ReplayOptions.ExecutePlayPauseLog(System.Object)">
            <summary>
            Execute play or pause based on current Task State
            </summary>
            <param name="parameter">none</param>
        </member>
        <member name="M:WideBoxInterface.ReplayOptions.CanExecutePlayPauseLog(System.Object)">
            <summary>
            Return if the PlayPause can be executed
            </summary>
            <param name="parameter">none</param>
            <returns>True if can be Played or Pause</returns>
        </member>
        <member name="P:WideBoxInterface.ReplayOptions.LoadLog">
            <summary>
            Get or Set the LoadLog relay command
            </summary>
        </member>
        <member name="P:WideBoxInterface.ReplayOptions.PlayPauseLog">
            <summary>
            Get or Set Play Pause Log relay command
            </summary>
        </member>
        <member name="P:WideBoxInterface.ReplayOptions.StopLog">
            <summary>
            Get or Set 
            </summary>
        </member>
        <member name="T:WideBoxInterface.ReplayView">
            <summary>
            Interaction logic for ReplayView.xaml
            </summary>
            <summary>
            ReplayView
            </summary>
        </member>
        <member name="M:WideBoxInterface.ReplayView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:WideBoxInterface.TCPIPConfigForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WideBoxInterface.TCPIPConfigForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WideBoxInterface.TCPIPConfigForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WideBoxInterface.TimeSpanControl">
            <summary>
            Interaction logic for TimeSpanControl.xaml
            </summary>
            <summary>
            TimeSpanControl
            </summary>
        </member>
        <member name="M:WideBoxInterface.TimeSpanControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:USBClassLibrary.USBClass">
            <summary>
            Override WndProc in your form and call the ProcessWindowsMessage method.
            USBPort.ProcessWindowsMessage(ref m);
            base.WndProc(ref m);
            </summary>
        </member>
        <member name="M:USBClassLibrary.USBClass.RegisterForDeviceChange(System.Boolean,System.IntPtr)">
            <summary>
            Registers to be notified when devices are added or removed.
            </summary>
            <param name="register">True to register, False to unregister</param>
            <param name="WindowsHandle">The handle of the Windows. For .net: Form.Handle. For WPF HwndSource.Handle.</param>
            <returns>True if successfull, False otherwise</returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.GetUSBDevice(System.UInt32,System.UInt32,System.Collections.Generic.List{USBClassLibrary.USBClass.DeviceProperties}@,System.Boolean,System.Nullable{System.UInt32})">
            <summary>
            Enumerate all USB devices and look for the device whose VID and PID are provided.
            </summary>
            <param name="VID">The Vendor ID of the USB Device.</param>
            <param name="PID">The Product ID of the USB Device.</param>
            <param name="DPList">A Device Properties structure list with all devices with same PID and VID.</param>
            <param name="GetCOMPort">Set to True to retrieve the COM Port number if the Device is emulating a Serial Port.</param>
            <param name="MI">Optional: The Interface of the USB Device to be used when searching for Composite Devices.</param>
            <returns>True the Device is found.</returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.GetUSBDevice(System.String,System.String,System.Collections.Generic.List{USBClassLibrary.USBClass.DeviceProperties}@,System.Boolean,System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Enumerate all USB devices and look for the device whose VID and PID are provided.
            </summary>
            <param name="ExpectedDeviceID"></param>
            <param name="ExpectedInterfaceID"></param>
            <param name="DPList">A Device Properties structure list with all devices with same PID and VID.</param>
            <param name="GetCOMPort">Set to True to retrieve the COM Port number if the Device is emulating a Serial Port.</param>
            <param name="MI">Optional: The Interface of the USB Device to be used when searching for Composite Devices.</param>
            <param name="reverseFind"></param>
            <returns>True the Device is found.</returns>
        </member>
        <member name="E:USBClassLibrary.USBClass.USBDeviceAttached">
            <summary>
            Events signalized to the client app.
            Add handlers for these events in your form to be notified of removable device events.
            </summary>
        </member>
        <member name="P:USBClassLibrary.USBClass.IsQueryHooked">
            <summary>
            Gets the value indicating whether the query remove event will be fired.
            </summary>
        </member>
        <member name="T:USBClassLibrary.USBClass.Win32Wrapper">
            <summary>
            WinAPI functions
            </summary>        
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.SetupDiEnumDeviceInfo(System.IntPtr,System.UInt32,USBClassLibrary.USBClass.Win32Wrapper.SP_DEVINFO_DATA@)">
            <summary>
            The SetupDiEnumDeviceInfo function retrieves a context structure for a device information element of the specified
            device information set. Each call returns information about one device. The function can be called repeatedly
            to get information about several devices.
            </summary>
            <param name="DeviceInfoSet">A handle to the device information set for which to return an SP_DEVINFO_DATA structure that represents a device information element.</param>
            <param name="MemberIndex">A zero-based index of the device information element to retrieve.</param>
            <param name="DeviceInfoData">A pointer to an SP_DEVINFO_DATA structure to receive information about an enumerated device information element. The caller must set DeviceInfoData.cbSize to sizeof(SP_DEVINFO_DATA).</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:USBClassLibrary.USBClass.Win32Wrapper.SetupDiGetDeviceInstanceId(System.IntPtr,USBClassLibrary.USBClass.Win32Wrapper.SP_DEVINFO_DATA@,System.IntPtr,System.UInt32,System.UInt32@)" -->
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.SetupDiEnumDeviceInterfaces(System.IntPtr,System.IntPtr,System.Guid@,System.UInt32,USBClassLibrary.USBClass.Win32Wrapper.SP_DEVICE_INTERFACE_DATA@)">
            <summary>
            A call to SetupDiEnumDeviceInterfaces retrieves a pointer to a structure that identifies a specific device interface
            in the previously retrieved DeviceInfoSet array. The call specifies a device interface by passing an array index.
            To retrieve information about all of the device interfaces, an application can loop through the array,
            incrementing the array index until the function returns zero, indicating that there are no more interfaces.
            The GetLastError API function then returns No more data is available.
            </summary>
            <param name="hDevInfo">Input: Give it the HDEVINFO we got from SetupDiGetClassDevs()</param>
            <param name="devInfo">Input (optional)</param>
            <param name="interfaceClassGuid">Input</param>
            <param name="memberIndex">Input: "Index" of the device you are interested in getting the path for.</param>
            <param name="deviceInterfaceData">Output: This function fills in an "SP_DEVICE_INTERFACE_DATA" structure.</param>
            <returns></returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.SetupDiGetDeviceInterfaceDetail(System.IntPtr,USBClassLibrary.USBClass.Win32Wrapper.SP_DEVICE_INTERFACE_DATA@,USBClassLibrary.USBClass.Win32Wrapper.SP_DEVICE_INTERFACE_DETAIL_DATA@,System.UInt32,System.UInt32@,USBClassLibrary.USBClass.Win32Wrapper.SP_DEVINFO_DATA@)">
            <summary>
            Gives us a device path, which is needed before CreateFile() can be used.
            </summary>
            <param name="hDevInfo">Input: Wants HDEVINFO which can be obtained from SetupDiGetClassDevs()</param>
            <param name="deviceInterfaceData">Input: Pointer to a structure which defines the device interface.</param>
            <param name="deviceInterfaceDetailData">Output: Pointer to a structure, which will contain the device path.</param>
            <param name="deviceInterfaceDetailDataSize">Input: Number of bytes to retrieve.</param>
            <param name="requiredSize">Output (optional): The number of bytes needed to hold the entire struct</param>
            <param name="deviceInfoData">Output</param>
            <returns></returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.SetupDiDestroyDeviceInfoList(System.IntPtr)">
            <summary>
            Frees up memory by destroying a DeviceInfoList
            </summary>
            <param name="hDevInfo"></param>
            <returns></returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.SetupDiGetClassDevs(System.Guid@,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Returns a HDEVINFO type for a device information set.
            We will need the HDEVINFO as in input parameter for calling many of the other SetupDixxx() functions.
            </summary>
            <param name="ClassGuid"></param>
            <param name="Enumerator"></param>
            <param name="hwndParent"></param>
            <param name="Flags"></param>
            <returns></returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.SetupDiGetDeviceRegistryProperty(System.IntPtr,USBClassLibrary.USBClass.Win32Wrapper.SP_DEVINFO_DATA@,System.UInt32,System.UInt32@,System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            The SetupDiGetDeviceRegistryProperty function retrieves the specified device property.
            This handle is typically returned by the SetupDiGetClassDevs or SetupDiGetClassDevsEx function.
            </summary>
            <param Name="DeviceInfoSet">Handle to the device information set that contains the interface and its underlying device.</param>
            <param Name="DeviceInfoData">Pointer to an SP_DEVINFO_DATA structure that defines the device instance.</param>
            <param Name="Property">Device property to be retrieved. SEE MSDN</param>
            <param Name="PropertyRegDataType">Pointer to a variable that receives the registry data Type. This parameter can be NULL.</param>
            <param Name="PropertyBuffer">Pointer to a buffer that receives the requested device property.</param>
            <param Name="PropertyBufferSize">Size of the buffer, in bytes.</param>
            <param Name="RequiredSize">Pointer to a variable that receives the required buffer size, in bytes. This parameter can be NULL.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.CM_Get_Device_ID_Size(System.UInt32@,System.Int32,System.Int32)">
            <summary>
            The CM_Get_Device_ID_Size function retrieves the buffer size required to hold a device instance ID for a device instance on the local machine.
            </summary>
            <param name="pulLen">Receives a value representing the required buffer size, in characters.</param>
            <param name="dnDevInst">Caller-supplied device instance handle that is bound to the local machine.</param>
            <param name="ulFlags">Not used, must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.CM_Get_Parent(System.UInt32@,System.UInt32,System.Int32)">
            <summary>
            The CM_Get_Parent function obtains a device instance handle to the parent node of a specified device node, in the local machine's device tree.
            </summary>
            <param name="pdnDevInst">Caller-supplied pointer to the device instance handle to the parent node that this function retrieves. The retrieved handle is bound to the local machine.</param>
            <param name="dnDevInst">Caller-supplied device instance handle that is bound to the local machine.</param>
            <param name="ulFlags">Not used, must be zero.</param>
            <returns>If the operation succeeds, the function returns CR_SUCCESS. Otherwise, it returns one of the CR_-prefixed error codes defined in cfgmgr32.h.</returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.CM_Get_Device_ID(System.UInt32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The CM_Get_Device_ID function retrieves the device instance ID for a specified device instance, on the local machine.
            </summary>
            <param name="dnDevInst">Caller-supplied device instance handle that is bound to the local machine.</param>
            <param name="Buffer">Address of a buffer to receive a device instance ID string. The required buffer size can be obtained by calling CM_Get_Device_ID_Size, then incrementing the received value to allow room for the string's terminating NULL.</param>
            <param name="BufferLen">Caller-supplied length, in characters, of the buffer specified by Buffer.</param>
            <param name="ulFlags">Not used, must be zero.</param>
            <returns>If the operation succeeds, the function returns CR_SUCCESS. Otherwise, it returns one of the CR_-prefixed error codes defined in cfgmgr32.h.</returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.CM_Get_Child(System.Int32@,System.Int32,System.Int32)">
            <summary>
            The CM_Get_Child function is used to retrieve a device instance handle to the first child node of a specified device node (devnode) in the local machine's device tree.
            </summary>
            <param name="pdnDevInst">Caller-supplied pointer to the device instance handle to the child node that this function retrieves. The retrieved handle is bound to the local machine.</param>
            <param name="dnDevInst">Caller-supplied device instance handle that is bound to the local machine.</param>
            <param name="ulFlags">Not used, must be zero.</param>
            <returns>If the operation succeeds, the function returns CR_SUCCESS. Otherwise, it returns one of the CR_-prefixed error codes defined in cfgmgr32.h.</returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.SetupDiOpenDevRegKey(System.IntPtr,USBClassLibrary.USBClass.Win32Wrapper.SP_DEVINFO_DATA@,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The SetupDiOpenDevRegKey function opens a registry key for device-specific configuration information.
            </summary>
            <param name="hDeviceInfoSet">A handle to the device information set that contains a device information element that represents the device for which to open a registry key.</param>
            <param name="DeviceInfoData">A pointer to an SP_DEVINFO_DATA structure that specifies the device information element in DeviceInfoSet.</param>
            <param name="Scope">The scope of the registry key to open. The scope determines where the information is stored. The scope can be global or specific to a hardware profile. The scope is specified by one of the following values:
            DICS_FLAG_GLOBAL Open a key to store global configuration information. This information is not specific to a particular hardware profile. For NT-based operating systems this opens a key that is rooted at HKEY_LOCAL_MACHINE. The exact key opened depends on the value of the KeyType parameter.
            DICS_FLAG_CONFIGSPECIFIC Open a key to store hardware profile-specific configuration information. This key is rooted at one of the hardware-profile specific branches, instead of HKEY_LOCAL_MACHINE. The exact key opened depends on the value of the KeyType parameter.</param>
            <param name="HwProfile">A hardware profile value, which is set as follows:
            If Scope is set to DICS_FLAG_CONFIGSPECIFIC, HwProfile specifies the hardware profile of the key that is to be opened.
            If HwProfile is 0, the key for the current hardware profile is opened.
            If Scope is DICS_FLAG_GLOBAL, HwProfile is ignored.</param>
            <param name="KeyType">The type of registry storage key to open, which can be one of the following values:
            DIREG_DEV Open a hardware key for the device.
            DIREG_DRV Open a software key for the device.
            For more information about a device's hardware and software keys, see Driver Information in the Registry.</param>
            <param name="samDesired">The registry security access that is required for the requested key. For information about registry security access values of type REGSAM, see the Microsoft Windows SDK documentation.</param>
            <returns>If the function is successful, it returns a handle to an opened registry key where private configuration data pertaining to this device instance can be stored/retrieved.
            If the function fails, it returns INVALID_HANDLE_VALUE. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.RegQueryValueEx(System.IntPtr,System.String,System.UInt32,System.UInt32@,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Retrieves the type and data for the specified value name associated with an open registry key.
            </summary>
            <param name="hKey">A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right.</param>
            <param name="lpValueName">The name of the registry value.
            If lpValueName is NULL or an empty string, "", the function retrieves the type and data for the key's unnamed or default value, if any.
            If lpValueName specifies a key that is not in the registry, the function returns ERROR_FILE_NOT_FOUND.</param>
            <param name="lpReserved">This parameter is reserved and must be NULL.</param>
            <param name="lpType">A pointer to a variable that receives a code indicating the type of data stored in the specified value. The lpType parameter can be NULL if the type code is not required.</param>
            <param name="lpData">A pointer to a buffer that receives the value's data. This parameter can be NULL if the data is not required.</param>
            <param name="lpcbData">A pointer to a variable that specifies the size of the buffer pointed to by the lpData parameter, in bytes. When the function returns, this variable contains the size of the data copied to lpData.
            The lpcbData parameter can be NULL only if lpData is NULL.
            If the data has the REG_SZ, REG_MULTI_SZ or REG_EXPAND_SZ type, this size includes any terminating null character or characters unless the data was stored without them. For more information, see Remarks.
            If the buffer specified by lpData parameter is not large enough to hold the data, the function returns ERROR_MORE_DATA and stores the required buffer size in the variable pointed to by lpcbData. In this case, the contents of the lpData buffer are undefined.
            If lpData is NULL, and lpcbData is non-NULL, the function returns ERROR_SUCCESS and stores the size of the data, in bytes, in the variable pointed to by lpcbData. This enables an application to determine the best way to allocate a buffer for the value's data.If hKey specifies HKEY_PERFORMANCE_DATA and the lpData buffer is not large enough to contain all of the returned data, RegQueryValueEx returns ERROR_MORE_DATA and the value returned through the lpcbData parameter is undefined. This is because the size of the performance data can change from one call to the next. In this case, you must increase the buffer size and call RegQueryValueEx again passing the updated buffer size in the lpcbData parameter. Repeat this until the function succeeds. You need to maintain a separate variable to keep track of the buffer size, because the value returned by lpcbData is unpredictable.
            If the lpValueName registry value does not exist, RegQueryValueEx returns ERROR_FILE_NOT_FOUND and the value returned through the lpcbData parameter is undefined.</param>
            <returns>If the function succeeds, the return value is ERROR_SUCCESS.
            If the function fails, the return value is a system error code.
            If the lpData buffer is too small to receive the data, the function returns ERROR_MORE_DATA.
            If the lpValueName registry value does not exist, the function returns ERROR_FILE_NOT_FOUND.</returns>
        </member>
        <member name="M:USBClassLibrary.USBClass.Win32Wrapper.RegCloseKey(System.IntPtr)">
            <summary>
            Closes a handle to the specified registry key.
            </summary>
            <param name="hKey">A handle to the open key to be closed.</param>
            <returns>If the function succeeds, the return value is ERROR_SUCCESS.
            If the function fails, the return value is a nonzero error code defined in Winerror.h.</returns>
        </member>
        <member name="T:USBClassLibrary.USBClass.Win32Wrapper.GUID_DEVINTERFACE">
            <summary>
            Device Interface GUIDs.
            </summary>
        </member>
        <member name="T:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY">
            <summary>
            Access rights for registry key objects.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_ALL_ACCESS">
            <summary>
            Combines the STANDARD_RIGHTS_REQUIRED, KEY_QUERY_VALUE, KEY_SET_VALUE, KEY_CREATE_SUB_KEY, KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY, and KEY_CREATE_LINK access rights.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_CREATE_LINK">
            <summary>
            Reserved for system use.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_CREATE_SUB_KEY">
            <summary>
            Required to create a subkey of a registry key.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_ENUMERATE_SUB_KEYS">
            <summary>
            Required to enumerate the subkeys of a registry key.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_EXECUTE">
            <summary>
            Equivalent to KEY_READ.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_NOTIFY">
            <summary>
            Required to request change notifications for a registry key or for subkeys of a registry key.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_QUERY_VALUE">
            <summary>
            Required to query the values of a registry key.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_READ">
            <summary>
            Combines the STANDARD_RIGHTS_READ, KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY values.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_SET_VALUE">
            <summary>
            Required to create, delete, or set a registry value.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_WOW64_32KEY">
            <summary>
            Indicates that an application on 64-bit Windows should operate on the 32-bit registry view. For more information, see Accessing an Alternate Registry View. This flag must be combined using the OR operator with the other flags in this table that either query or access registry values. Windows 2000:  This flag is not supported.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_WOW64_64KEY">
            <summary>
            Indicates that an application on 64-bit Windows should operate on the 64-bit registry view. For more information, see Accessing an Alternate Registry View. This flag must be combined using the OR operator with the other flags in this table that either query or access registry values. Windows 2000:  This flag is not supported.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.REGKEYSECURITY.KEY_WRITE">
            <summary>
            Combines the STANDARD_RIGHTS_WRITE, KEY_SET_VALUE, and KEY_CREATE_SUB_KEY access rights.
            </summary>
        </member>
        <member name="T:USBClassLibrary.USBClass.Win32Wrapper.DIGCF">
            <summary>
            Flags controlling what is included in the device information set built by SetupDiGetClassDevs
            </summary>
        </member>
        <member name="T:USBClassLibrary.USBClass.Win32Wrapper.DICS_FLAG">
            <summary>
            Values specifying the scope of a device property change.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.DICS_FLAG.DICS_FLAG_GLOBAL">
            <summary>
            Make change in all hardware profiles
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.DICS_FLAG.DICS_FLAG_CONFIGSPECIFIC">
            <summary>
            Make change in specified profile only
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.DICS_FLAG.DICS_FLAG_CONFIGGENERAL">
            <summary>
            1 or more hardware profile-specific
            </summary>
        </member>
        <member name="T:USBClassLibrary.USBClass.Win32Wrapper.DIREG">
            <summary>
            KeyType values for SetupDiCreateDevRegKey, SetupDiOpenDevRegKey, and SetupDiDeleteDevRegKey.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.DIREG.DIREG_DEV">
            <summary>
            Open/Create/Delete device key
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.DIREG.DIREG_DRV">
            <summary>
            Open/Create/Delete driver key
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.DIREG.DIREG_BOTH">
            <summary>
            Delete both driver and Device key
            </summary>
        </member>
        <member name="T:USBClassLibrary.USBClass.Win32Wrapper.SPDRP">
            <summary>
            Device registry property codes
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_DEVICEDESC">
            <summary>
            DeviceDesc (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_HARDWAREID">
            <summary>
            HardwareID (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_COMPATIBLEIDS">
            <summary>
            CompatibleIDs (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_UNUSED0">
            <summary>
            unused
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_SERVICE">
            <summary>
            Service (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_UNUSED1">
            <summary>
            unused
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_UNUSED2">
            <summary>
            unused
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_CLASS">
            <summary>
            Class (R--tied to ClassGUID)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_CLASSGUID">
            <summary>
            ClassGUID (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_DRIVER">
            <summary>
            Driver (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_CONFIGFLAGS">
            <summary>
            ConfigFlags (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_MFG">
            <summary>
            Mfg (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_FRIENDLYNAME">
            <summary>
            FriendlyName (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_LOCATION_INFORMATION">
            <summary>
            LocationInformation (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_PHYSICAL_DEVICE_OBJECT_NAME">
            <summary>
            PhysicalDeviceObjectName (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_CAPABILITIES">
            <summary>
            Capabilities (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_UI_NUMBER">
            <summary>
            UiNumber (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_UPPERFILTERS">
            <summary>
            UpperFilters (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_LOWERFILTERS">
            <summary>
            LowerFilters (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_BUSTYPEGUID">
            <summary>
            BusTypeGUID (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_LEGACYBUSTYPE">
            <summary>
            LegacyBusType (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_BUSNUMBER">
            <summary>
            BusNumber (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_ENUMERATOR_NAME">
            <summary>
            Enumerator Name (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_SECURITY">
            <summary>
            Security (R/W, binary form)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_SECURITY_SDS">
            <summary>
            Security (W, SDS form)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_DEVTYPE">
            <summary>
            Device Type (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_EXCLUSIVE">
            <summary>
            Device is exclusive-access (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_CHARACTERISTICS">
            <summary>
            Device Characteristics (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_ADDRESS">
            <summary>
            Device Address (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_UI_NUMBER_DESC_FORMAT">
            <summary>
            UiNumberDescFormat (R/W)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_DEVICE_POWER_DATA">
            <summary>
            Device Power Data (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_REMOVAL_POLICY">
            <summary>
            Removal Policy (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_REMOVAL_POLICY_HW_DEFAULT">
            <summary>
            Hardware Removal Policy (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_REMOVAL_POLICY_OVERRIDE">
            <summary>
            Removal Policy Override (RW)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_INSTALL_STATE">
            <summary>
            Device Install State (R)
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.Win32Wrapper.SPDRP.SPDRP_LOCATION_PATHS">
            <summary>
            Device Location Paths (R)
            </summary>
        </member>
        <member name="T:USBClassLibrary.USBClass.USBDeviceEventArgs">
            <summary>
            Class for passing in custom arguments to our event handlers.
            </summary>
        </member>
        <member name="F:USBClassLibrary.USBClass.USBDeviceEventArgs.Cancel">
            <summary>
            Get/Set the value indicating that the event should be cancelled 
            Only in QueryRemove handler.
            </summary>
        </member>
        <member name="P:USBClassLibrary.USBClass.USBDeviceEventArgs.HookQueryRemove">
            <summary>
            Set to true in your DeviceArrived event handler if you wish to receive the 
            QueryRemove event for this device. 
            </summary>
        </member>
        <member name="P:USBClassLibrary.USBClass.USBDeviceEventArgs.DeviceInterface">
            <summary>
            Get the device Interface
            </summary>
        </member>
        <member name="F:WideBoxInterface.WBIChat.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WideBoxInterface.WBIChat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WideBoxInterface.WBIChat.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WideBoxInterface.WBIChatImplementer">
            <summary>
            Implements the WBIChat messages callback and send messages as well.
            </summary>
        </member>
        <member name="M:WideBoxInterface.WBIChatImplementer.Subscribe">
            <summary>
            Subscribes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideBoxInterface.WBIChatImplementer.Unsubscribe">
            <summary>
            Unsubscribe this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideBoxInterface.WBIChatImplementer.OnMessageAdded(System.String,System.String)">
            <summary>
            Called when [message added].
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:WideBoxInterface.WBIChatImplementer.AddMessage(System.String,System.String)">
            <summary>
            Adds the message.
            </summary>
            <param name="p">The p.</param>
            <param name="message">The message.</param>
        </member>
        <member name="E:WideBoxInterface.WBIChatImplementer.OnMessageIncome">
            <summary>
            Occurs when [on message income].
            </summary>
        </member>
        <member name="P:WideBoxInterface.WBIChatImplementer.Service">
            <summary>
            Sets the service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="T:WideBoxInterface.WBIChatImplementer.MessageAddedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:WideBoxInterface.WBIChatImplementer.MessageAddedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WideBoxInterface.WBIChatImplementer.MessageAddedEventArgs"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:WideBoxInterface.WBIChatImplementer.MessageAddedEventArgs.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:WideBoxInterface.WBIChatImplementer.MessageAddedEventArgs.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:WideBoxInterface.WBoxService">
            <summary>
            Whirlpool box services
            </summary>
        </member>
        <member name="M:WideBoxInterface.WBoxService.#ctor">
            <summary>
            Instantiate a new WBoxService
            </summary>
        </member>
        <member name="M:WideBoxInterface.WBoxService.SetSerial(System.String,System.Int32,WideBoxLib.WideBox.PC_PROTOCOL)">
            <summary>
            Set the serial port to the widebox communication
            </summary>
            <param name="port">COM name</param>
            <param name="interval">interval between sending messages on the TX buffer</param>
            <param name="protocol">set the PC protocol to use</param>
            <returns>Feedback of opening: "OPEN" or "Port Not Available"</returns>
        </member>
        <member name="M:WideBoxInterface.WBoxService.IsComOpen">
            <summary>
            Return true if Port set is open
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideBoxInterface.WBoxService.GetPortName">
            <summary>
            Get current set Port name
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideBoxInterface.WBoxService.GetPCProtocol">
            <summary>
            Get current set PC protocol
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideBoxInterface.WBoxService.SendMessage(System.Byte,System.Byte,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Send a message through the Device, uses the current selected Bus Protocol
            Block the execution until receives an Ack from the device or timeout has occurred
            </summary>
            <param name="address">Destination Address</param>
            <param name="sap">SAP (4 for Reveal)</param>
            <param name="data">Simple Whirlpool Message Payload (use getMessagePayload from RevealPacket and TDDPacket)</param>
            <param name="blockingExecution">set true to make it a blocking call and then allow return false if message is not out after timeout</param>
            <param name="timeout">Time in miliseconds to wait for the message being out</param>
        </member>
        <member name="M:WideBoxInterface.WBoxService.SendCommand(System.Byte,System.Byte[])">
            <summary>
            Send a configuration command to the WideBox
            </summary>
            <param name="cmd">Current command to be sent: Use WideBoxConstants to get the command list</param>
            <param name="data">Data to the given command</param>
        </member>
        <member name="M:WideBoxInterface.WBoxService.CloseSerial">
            <summary>
            Closes the serial Port
            </summary>
        </member>
        <member name="M:WideBoxInterface.WBoxService.Dispose">
            <summary>
            Dispose WideBox
            </summary>
        </member>
        <member name="M:WideBoxInterface.WBoxService.GetCOMPorts">
            <summary>
            Get the list of Com port on target machine
            </summary>
            <returns></returns>
        </member>
        <member name="P:WideBoxInterface.WBoxService.WideBox">
            <summary>
            WideBox singleton instance
            </summary>
        </member>
        <member name="M:WideBoxInterface.Widebasic.#ctor(WideBoxLib.WideBox,System.Windows.Forms.Timer,System.Boolean)">
            <summary>
            Create a new Widebasic form and startup the timer
            </summary>
            <param name="wbLocal"></param>
            <param name="timerLocal"></param>
            <param name="suppressChangeProtocolOnStartup"></param>
        </member>
        <member name="M:WideBoxInterface.Widebasic.parseDeviceMessage(System.String,System.Byte[])">
            <summary>
            Virtual method that must be overrided on the child forms to parse device messages
            </summary>
            <param name="message">string containing a message from the device</param>
            <param name="data">data from the device message</param>
        </member>
        <member name="M:WideBoxInterface.Widebasic.OnHandleCreated(System.EventArgs)">
            <summary>
            Override called when the window handle has been created.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WideBoxInterface.Widebasic.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrride windows message handle
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:WideBoxInterface.Widebasic.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WideBoxInterface.Widebasic.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WideBoxInterface.Widebasic.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:WideBoxInterface.Widebasic.BUSProtocol">
            <summary>
            Current Bus Protocol set
            </summary>
        </member>
        <member name="T:WideBoxInterface.Widebasic.FuncModeBits">
            <summary>
            Func Mode bit position
            </summary>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.Run(WideInterface[])">
            <summary>
            Run in debug mode with given debugInterfaces installed
            </summary>
            <param name="debugInterfaces"></param>
        </member>
        <member name="F:WideBoxInterface.WideBoxInterfaceForm.TimeStampFormat">
            <summary>
            Date Time Format used in Time Stamps
            </summary>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.LogFullException(System.String)">
            <summary>
            Log an exception that already contains it's own info in the message
            </summary>
            <param name="exception">string whit the exception</param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.LogException(System.String)">
            <summary>
            Add a new Exception to the exception list
            </summary>
            <param name="exception">Exception message</param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.LogException(System.Exception,System.Boolean)">
            <summary>
            Add a new Exception to the exception list
            Includes the Stack Trace from the exception if addTrace is true
            </summary>
            <param name="exception">Exception to be push into list</param>
            <param name="addTrace">Includes the Stack Trace from the exception</param>
        </member>
        <member name="F:WideBoxInterface.WideBoxInterfaceForm.ConfigFilePath">
            <summary>
            Get the path to the config file
            </summary>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.#ctor">
            <summary>
            Instantiate a new WideBoxInterfaceForm
            </summary>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.AddInternalMessage(WideBoxLib.ExtendedSimpleWhirlpoolPacket)">
            <summary>
            Used to internal messaging functions
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.AddInternalDeviceMessage(WideBoxLib.DeviceMessage)">
            <summary>
            Used to internal messaging functions
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.threadRX">
            <summary>
            Run get message functions (device and wide/win/log replay/sockets)
            Set messages to other buffer that will be get in a timer thread
            </summary>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.AddExternalMessage(WideBoxLib.ExtendedSimpleWhirlpoolPacket)">
            <summary>
            Used to replay functions
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.AddExternalDeviceMessage(WideBoxLib.DeviceMessage)">
            <summary>
            Used to replay functions
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.CloseLogs">
            <summary>
            Close current opened logs
            </summary>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.OpenLogs">
            <summary>
            Open all logs
            </summary>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.collapseMessageWindows(System.Boolean,System.Int32)">
            <summary>
            Set true to collapse or false to show
            </summary>
            <param name="collapse"></param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.GetCOMPortNames">
            <summary>
            Get Local or Remote Port Names depending on IsSetAndSendEventBased
            </summary>
            <returns></returns>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.WriteSocket(WideBoxLib.ExtendedSimpleWhirlpoolPacket)">
            <summary>
            Write a new ExtendedSimpleWhirlpoolPacket into the socket FIFO
            </summary>
            <param name="message">message to be added</param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.WriteSocket(WideBoxLib.DeviceMessage)">
            <summary>
            Write a new DeviceMessage into the socket FIFO
            </summary>
            <param name="message">message to be added</param>
        </member>
        <member name="F:WideBoxInterface.WideBoxInterfaceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WideBoxInterface.WideBoxInterfaceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:WideBoxInterface.WideBoxInterfaceForm.WideLocal">
            <summary>
            Local copy accessor to be used on Debug
            </summary>
        </member>
        <member name="P:WideBoxInterface.WideBoxInterfaceForm.Reinstall">
            <summary>
            <c>true</c> if will reinstall new interface after re-opening
            </summary>
        </member>
        <member name="P:WideBoxInterface.WideBoxInterfaceForm.SuppressChange">
            <summary>
            Suppress a Change in protocol when initializing
            </summary>
        </member>
        <member name="P:WideBoxInterface.CustomInterfaceOptions.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:WideBoxInterface.CustomInterfaceOptionsItems.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WideBoxInterface.CustomInterfaceOptionsItems.WindowSize">
            <summary>
            Gets or sets the size of the window.
            </summary>
            <value>
            The size of the window.
            </value>
        </member>
        <member name="P:WideBoxInterface.CustomInterfaceOptionsItems.WindowLocation">
            <summary>
            Gets or sets the window location.
            </summary>
            <value>
            The window location.
            </value>
        </member>
        <member name="T:WideBoxInterface.CustomInterface">
            <summary>
            Abstract the Custom Interface manifest
            </summary>
        </member>
        <member name="P:WideBoxInterface.CustomInterface.ClassName">
            <summary>
            Gets or sets the name of the class.
            </summary>
            <value>
            The name of the class.
            </value>
        </member>
        <member name="P:WideBoxInterface.CustomInterface.DllName">
            <summary>
            Gets or sets the name of the DLL.
            </summary>
            <value>
            The name of the DLL.
            </value>
        </member>
        <member name="T:WideBoxInterface.CustomInterfaceList">
            <summary>
            Represents a list of Custom Interfaces
            </summary>
        </member>
        <member name="P:WideBoxInterface.CustomInterfaceList.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:WideBoxInterface.MessageWindowsOptions">
            <summary>
            Represents the state of the MessageWindow
            </summary>
        </member>
        <member name="P:WideBoxInterface.MessageWindowsOptions.CollapsedString">
            <summary>
            Used for serialization only
            </summary>
        </member>
        <member name="P:WideBoxInterface.MessageWindowsOptions.SplitterDistance">
            <summary>
            Gets or sets the splitter distance.
            </summary>
            <value>
            The splitter distance.
            </value>
        </member>
        <member name="T:WideBoxInterface.LogIntervalOptions">
            <summary>
            Represent log options
            </summary>
        </member>
        <member name="P:WideBoxInterface.LogIntervalOptions.IsLoggingString">
            <summary>
            Used for serialization only
            </summary>
        </member>
        <member name="P:WideBoxInterface.LogIntervalOptions.IsLogging">
            <summary>
            Gets or sets a value indicating whether this instance is logging.
            </summary>
            <value>
            <c>true</c> if this instance is logging; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WideBoxInterface.SuppressProtocolChangeOnStartupOptions">
            <summary>
            Represent the options of suppressing protocol change on startup
            </summary>
        </member>
        <member name="P:WideBoxInterface.SuppressProtocolChangeOnStartupOptions.ValueString">
            <summary>
            Used for serialization only
            </summary>
        </member>
        <member name="T:WideBoxInterface.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WideBoxInterface.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WideBoxInterface.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WideBoxInterface.Properties.Resources.PauseGreen">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WideBoxInterface.Properties.Resources.PlayGreen">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WideBoxInterface.Properties.Resources.StopGreen">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
